# 服务端口
server.port=80
# 应用名称
spring.application.name=SpringBoot-Easy

# 请求和响应使用UTF-8编码
server.servlet.encoding.charset=UTF-8
server.servlet.encoding.force-request=true
server.servlet.encoding.force-response=true

# 数据库配置springboot-easy
spring.datasource.url=jdbc:mysql://localhost:3306/springboot-easy?tinyInt1isBit=false&useUnicode=true&characterEncoding=utf-8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true&serverTimezone=GMT%2B8&nullCatalogMeansCurrent=true
spring.datasource.username=root
spring.datasource.password=root

# 数据库配置基于mycat实现读写分离和分库分表
#spring.datasource.url=jdbc:mysql://localhost:8066/druid?tinyInt1isBit=false&useUnicode=true&characterEncoding=utf-8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true&serverTimezone=GMT%2B8&nullCatalogMeansCurrent=true
#spring.datasource.username=druid
#spring.datasource.password=druid

# flyway配置
spring.flyway.locations=classpath:db/migration
spring.flyway.url=${spring.datasource.url}
spring.flyway.user=${spring.datasource.username}
spring.flyway.password=${spring.datasource.password}

# druid配置
spring.datasource.druid.initial-size=1
spring.datasource.druid.max-active=20
spring.datasource.druid.min-idle=1
spring.datasource.druid.max-wait=60000
spring.datasource.druid.pool-prepared-statements=true
spring.datasource.druid.max-open-prepared-statements=20
spring.datasource.druid.test-on-borrow=false
spring.datasource.druid.test-on-return=false
spring.datasource.druid.test-while-idle=true
spring.datasource.druid.time-between-eviction-runs-millis=60000
spring.datasource.druid.min-evictable-idle-time-millis=300000
# 配置timeBetweenLogStatsMillis>0之后，DruidDataSource会定期把监控数据输出到日志中
#spring.datasource.druid.time-between-log-stats-millis=60000
spring.datasource.druid.filters=config,stat,wall,slf4j
#spring.datasource.druid.filter.stat.enabled=true
#spring.datasource.druid.filter.config.enabled=true
#spring.datasource.druid.filter.wall.enabled=true
#spring.datasource.druid.filter.slf4j.enabled=true

# Spring监控配置，说明请参考Druid Github Wiki，配置_Druid和Spring关联监控配置
spring.datasource.druid.aop-patterns=com.github.brave2chen.springbooteasy.service,com.github.brave2chen.springbooteasy.mapper

# StatFilter配置
spring.datasource.druid.filter.stat.enabled=true
spring.datasource.druid.filter.stat.merge-sql=true
spring.datasource.druid.filter.stat.log-slow-sql=true
spring.datasource.druid.filter.stat.slow-sql-millis=3000

# Slf4jFilter配置
spring.datasource.druid.filter.slf4j.enabled=true
spring.datasource.druid.filter.slf4j.statement-executable-sql-log-enable=true
spring.datasource.druid.filter.slf4j.data-source-log-enabled=true


# WebStatFilter配置，说明请参考Druid Wiki，配置_配置WebStatFilter
spring.datasource.druid.web-stat-filter.enabled=true
#spring.datasource.druid.web-stat-filter.url-pattern=/**
#spring.datasource.druid.web-stat-filter.exclusions=
#spring.datasource.druid.web-stat-filter.session-stat-enable=true
#spring.datasource.druid.web-stat-filter.session-stat-max-count=
#spring.datasource.druid.web-stat-filter.principal-session-name=
#spring.datasource.druid.web-stat-filter.principal-cookie-name=
#spring.datasource.druid.web-stat-filter.profile-enable=


# StatViewServlet配置，说明请参考Druid Wiki，配置_StatViewServlet配置
spring.datasource.druid.stat-view-servlet.enabled=true
#spring.datasource.druid.stat-view-servlet.url-pattern=/druid/*
#spring.datasource.druid.stat-view-servlet.reset-enable=
spring.datasource.druid.stat-view-servlet.login-username=druid
spring.datasource.druid.stat-view-servlet.login-password=druid
#spring.datasource.druid.stat-view-servlet.allow=
#spring.datasource.druid.stat-view-servlet.deny=


# mybatis-plus
# 配置 mybatis 的日志实现，使其把sql输出到slf4j
mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.slf4j.Slf4jImpl
mybatis-plus.global-config.db-config.logic-delete-field=is_delete

# redis
spring.redis.host=localhost
spring.redis.port=6379
spring.redis.password=
spring.redis.timeout=300ms
spring.redis.lettuce.pool.max-wait=3000ms

# jackson
spring.jackson.date-format=yyyy-MM-dd HH:mm:ss
spring.jackson.locale=zh_CN
spring.jackson.time-zone=GMT+8
spring.jackson.default-property-inclusion=non_null

# 如果没有处理程序被发现处理请求抛出 NoHandlerFoundException 异常
spring.mvc.throw-exception-if-no-handler-found=true
# 不要为我们工程中的资源文件建立映射
spring.resources.add-mappings=false

# knife4j 自定义文档路径
knife4j.markdowns=classpath:markdown/*
# knife4j 生产环境，自动屏蔽swagger apis文档
knife4j.production=false
## 开启Swagger的Basic认证功能,默认是false
knife4j.basic.enable=false
## Basic认证用户名
knife4j.basic.username=springboot-easy
## Basic认证密码
knife4j.basic.password=123456

# 日志配置
logging.file.name=logs/log.log
logging.file.max-size=2MB
logging.file.max-history=5
logging.level.root=info
logging.level.com.github.brave2chen.springbooteasy=debug
logging.level.com.diboot.core=debug
logging.level.druid.sql.Statement=debug
# 日志格式添加traceId
logging.pattern.console=%clr(%d{${LOG_DATEFORMAT_PATTERN:yyyy-MM-dd HH:mm:ss.SSS}}){faint} %clr(${LOG_LEVEL_PATTERN:%5p}) %clr(${PID}){magenta} %clr(---){faint} %clr([%15.15t]){faint} [%X{traceId}] [%X{user}] %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:%wEx}
logging.pattern.file=%d{${LOG_DATEFORMAT_PATTERN:yyyy-MM-dd HH:mm:ss.SSS}} ${LOG_LEVEL_PATTERN:%5p} ${PID} --- [%t] [%X{traceId}] [%X{user}] %-40.40logger{39} : %m%n${LOG_EXCEPTION_CONVERSION_WORD:%wEx}

# actuator
management.endpoints.web.exposure.include=*

opentracing.jaeger.enabled=true
opentracing.jaeger.enable-b3-propagation=true
opentracing.jaeger.log-spans=true
opentracing.jaeger.const-sampler.decision=false
opentracing.jaeger.http-sender.url=http://localhost:14268/api/traces
opentracing.jaeger.tags.tag-key1=tag-value1
opentracing.jaeger.tags.tag-key2=tag-value2

opentracing.spring.web.enabled=true
opentracing.spring.web.client.enabled=true


okHttpClient.call-timeout=6000